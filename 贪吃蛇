<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>贪吃蛇游戏</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        .game-container {
            position: relative;
            background-color: #fff;
            border: 2px solid #333;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
        }
        canvas {
            display: block;
        }
        .score {
            margin-top: 15px;
            font-size: 18px;
            color: #333;
        }
        .instructions {
            margin-top: 10px;
            font-size: 14px;
            color: #666;
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>贪吃蛇游戏</h1>
    <div class="game-container">
        <canvas id="gameCanvas" width="400" height="400"></canvas>
    </div>
    <div class="score">分数: <span id="scoreValue">0</span></div>
    <div class="instructions">
        方向键控制蛇的移动 | 空格键暂停/继续
    </div>
    
    <!-- 返回网站链接 -->
    <div style="margin-top: 20px;">
    <p><a href="https://codepen.io/YCL0007/full/azvgjjN">返回</a></p>
    </div>

    <script>
        // 获取画布和上下文
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('scoreValue');

        // 游戏常量
        const GRID_SIZE = 20;
        const CANVAS_WIDTH = canvas.width;
        const CANVAS_HEIGHT = canvas.height;
        const GRID_WIDTH = CANVAS_WIDTH / GRID_SIZE;
        const GRID_HEIGHT = CANVAS_HEIGHT / GRID_SIZE;
        const INITIAL_SPEED = 500; // 初始移动速度（毫秒）
        const SAFE_BORDER_DISTANCE = 2; // 安全边界距离（格子数）
        const SNAKE_SAFE_DISTANCE = 3; // 与蛇之间的安全距离（格子数）

        // 游戏变量
        let snake = [];
        let food = {};
        let direction = 'right';
        let nextDirection = 'right';
        let score = 0;
        let gameLoopId = null;
        let gameSpeed = INITIAL_SPEED;
        let isPaused = false;
        let isGameOver = false;

        // 初始化游戏
        function initGame() {
            // 重置游戏状态
            snake = [
                {x: 10, y: 10},
                {x: 9, y: 10},
                {x: 8, y: 10}
            ];
            direction = 'right';
            nextDirection = 'right';
            score = 0;
            scoreElement.textContent = score;
            isPaused = false;
            isGameOver = false;
            gameSpeed = INITIAL_SPEED;

            // 生成初始食物
            generateFood();

            // 开始游戏循环
            if (gameLoopId) clearInterval(gameLoopId);
            gameLoopId = setInterval(gameLoop, gameSpeed);
        }

        // 生成食物
        function generateFood() {
            // 随机位置，确保不在蛇身上、不在边界附近、不在蛇的附近
            let newFood;
            do {
                newFood = {
                    x: Math.floor(Math.random() * (GRID_WIDTH - SAFE_BORDER_DISTANCE * 2)) + SAFE_BORDER_DISTANCE,
                    y: Math.floor(Math.random() * (GRID_HEIGHT - SAFE_BORDER_DISTANCE * 2)) + SAFE_BORDER_DISTANCE
                };
            } while (
                // 检查是否在蛇身上
                snake.some(segment => segment.x === newFood.x && segment.y === newFood.y) ||
                // 检查是否在蛇的附近
                snake.some(segment => 
                    Math.abs(segment.x - newFood.x) < SNAKE_SAFE_DISTANCE && 
                    Math.abs(segment.y - newFood.y) < SNAKE_SAFE_DISTANCE
                )
            );
            
            food = newFood;
        }

        // 游戏主循环
        function gameLoop() {
            if (isPaused || isGameOver) return;

            // 更新方向
            direction = nextDirection;

            // 获取蛇头位置
            const head = {x: snake[0].x, y: snake[0].y};

            // 根据方向移动蛇头
            switch (direction) {
                case 'up':
                    head.y--;
                    break;
                case 'down':
                    head.y++;
                    break;
                case 'left':
                    head.x--;
                    break;
                case 'right':
                    head.x++;
                    break;
            }

            // 检查碰撞
            if (checkCollision(head)) {
                gameOver();
                return;
            }

            // 添加新的蛇头
            snake.unshift(head);

            // 检查是否吃到食物
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                scoreElement.textContent = score;
                generateFood();
                
                // 随着分数增加，游戏速度逐渐加快
                if (score % 50 === 0 && gameSpeed > 50) {
                    gameSpeed -= 10;
                    clearInterval(gameLoopId);
                    gameLoopId = setInterval(gameLoop, gameSpeed);
                }
                
                // 检查是否达到胜利条件（500分）
                if (score >= 500) {
                    gameWin();
                    return;
                }
            } else {
                // 如果没吃到食物，移除蛇尾
                snake.pop();
            }

            // 绘制游戏
            draw();
        }

        // 检查碰撞
        function checkCollision(head) {
            // 检查是否撞墙
            if (head.x < 0 || head.x >= GRID_WIDTH || head.y < 0 || head.y >= GRID_HEIGHT) {
                return true;
            }

            // 检查是否撞到自己
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    return true;
                }
            }

            return false;
        }

        // 游戏结束
        function gameOver() {
            isGameOver = true;
            clearInterval(gameLoopId);
            
            // 绘制游戏结束画面
            ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
            ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
            
            ctx.fillStyle = 'white';
            ctx.font = '24px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('游戏结束！', CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);
            ctx.font = '16px Arial';
            ctx.fillText('按空格键重新开始', CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 30);
        }
        
        // 游戏胜利
        function gameWin() {
            isGameOver = true;
            clearInterval(gameLoopId);
            
            // 绘制游戏胜利画面
            ctx.fillStyle = 'rgba(0, 128, 0, 0.5)';
            ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
            
            ctx.fillStyle = 'white';
            ctx.font = '24px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('恭喜您赢了！', CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);
            ctx.font = '16px Arial';
            ctx.fillText('最终分数：' + score, CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 30);
            ctx.fillText('按空格键重新开始', CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 60);
        }

        // 绘制游戏
        function draw() {
            // 清空画布
            ctx.fillStyle = '#f0f0f0';
            ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);

            // 绘制蛇
            snake.forEach((segment, index) => {
                if (index === 0) {
                    // 蛇头
                    ctx.fillStyle = '#006400';
                } else {
                    // 蛇身
                    ctx.fillStyle = '#228B22';
                }
                ctx.fillRect(segment.x * GRID_SIZE, segment.y * GRID_SIZE, GRID_SIZE, GRID_SIZE);
                
                // 绘制蛇周边框
                ctx.strokeStyle = '#fff';
                ctx.strokeRect(segment.x * GRID_SIZE, segment.y * GRID_SIZE, GRID_SIZE, GRID_SIZE);
            });

            // 绘制食物
            ctx.fillStyle = '#FF4500';
            ctx.beginPath();
            ctx.arc(
                food.x * GRID_SIZE + GRID_SIZE / 2,
                food.y * GRID_SIZE + GRID_SIZE / 2,
                GRID_SIZE / 2,
                0,
                Math.PI * 2
            );
            ctx.fill();

            // 如果游戏暂停，显示暂停信息
            if (isPaused) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
                ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
                
                ctx.fillStyle = 'white';
                ctx.font = '24px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('游戏暂停', CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);
            }
        }

        // 处理键盘输入
        function handleKeyPress(e) {
            e.preventDefault();
            
            // 游戏结束时，按空格键重新开始
            if (isGameOver && e.code === 'Space') {
                initGame();
                return;
            }

            // 空格键暂停/继续游戏
            if (e.code === 'Space' && !isGameOver) {
                isPaused = !isPaused;
                draw();
                return;
            }

            // 如果游戏暂停或结束，不处理方向键
            if (isPaused || isGameOver) return;

            // 处理方向键
            switch (e.code) {
                case 'ArrowUp':
                    if (direction !== 'down') nextDirection = 'up';
                    break;
                case 'ArrowDown':
                    if (direction !== 'up') nextDirection = 'down';
                    break;
                case 'ArrowLeft':
                    if (direction !== 'right') nextDirection = 'left';
                    break;
                case 'ArrowRight':
                    if (direction !== 'left') nextDirection = 'right';
                    break;
            }
        }

        // 添加键盘事件监听
        document.addEventListener('keydown', handleKeyPress);

        // 初始化游戏
        initGame();
    </script>
</body>
    <footer>
        <p>© 2025 尹氏集团. 保留所有权利.</p>
    </footer>
</html>
